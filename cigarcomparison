import pysam
import csv
import re
from tabulate import tabulate

def read_and_process_reads(long_read_bam, subread_bam):
    long_read_cigar_dict = {}
    subread_cigar_list = []

    print("Opening BAM files...")
    long_read_file = pysam.AlignmentFile(long_read_bam, "rb")
    subread_file = pysam.AlignmentFile(subread_bam, "rb")

    print("Processing long reads...")
    for read in long_read_file.fetch():
        if read.cigarstring:
            base_seq_id = read.query_name.split()[0].split('/')[0]  # Extract ID before '/'
            long_read_cigar_dict[base_seq_id] = read.cigarstring
            print(f"Long Read - Seq ID: {base_seq_id}, CIGAR: {read.cigarstring}")
        else:
            print(f"Warning: Read {read.query_name} has no CIGAR string")

    print(f"Long reads dictionary: {len(long_read_cigar_dict)} entries")

    print("Processing subreads...")
    for read in subread_file.fetch():
        base_seq_id = read.query_name.split()[0]
        cigar = read.cigarstring
        start = read.reference_start
        end = read.reference_end

        if cigar:
            subread_cigar_list.append((base_seq_id, cigar, start, end))
            print(f"Subread - Seq ID: {base_seq_id}, CIGAR: {cigar}, Start: {start}, End: {end}")
        else:
            print(f"Warning: Subread {base_seq_id} has no CIGAR string")

    print(f"Subread list: {len(subread_cigar_list)} entries")

    return long_read_cigar_dict, subread_cigar_list

def parse_cigar(cigar_string):
    return [(int(length), op) for length, op in re.findall(r'(\d+)([MIDNSHP=X])', cigar_string)]

def get_cigar_name(op):
    return {
        'M': 'match',
        'I': 'insertion',
        'D': 'deletion',
        'N': 'splice',
        'S': 'soft_clip',
        'H': 'hard_clip',
        'P': 'padding',
        '=': 'match',
        'X': 'mismatch'
    }.get(op, 'unknown')

def generate_accurate_representation(long_cigar, start, end):
    """Generate the accurate representation CIGAR string for the region of interest."""
    trimmed_cigar = []
    position = 0
    for length, op in long_cigar:
        if position + length <= start:
            position += length
            continue
        if position < end:
            if position < start:
                length -= (start - position)
                position = start
            if position + length > end:
                length = end - position
            trimmed_cigar.append((length, op))
            position += length
        if position >= end:
            break
    return "".join(f"{length}{op}" for length, op in trimmed_cigar)

def calculate_accuracy_precision_recall(summary, total_subread_bases):
    accurate_bases = summary['match'] + summary['insertion'] + summary['deletion'] + summary['splice']
    total_detected_bases = sum(summary[op] for op in ['match', 'insertion', 'deletion', 'splice', 'unmatched_sub'])

    accuracy = accurate_bases / total_subread_bases if total_subread_bases > 0 else 0
    true_positives = summary['match'] + summary['insertion'] + summary['deletion'] + summary['splice']
    false_positives = summary['unmatched_sub']
    precision = true_positives / (true_positives + false_positives) if (true_positives + false_positives) > 0 else 0
    false_negatives = summary['unmatched_long']
    recall = true_positives / (true_positives + false_negatives) if (true_positives + false_negatives) > 0 else 0

    return accuracy, precision, recall

def align_subread_to_longread(long_read_cigar, subread_cigar, start, end):
    long_cigar = parse_cigar(long_read_cigar)
    sub_cigar = parse_cigar(subread_cigar)

    # Generate the accurate representation CIGAR string
    accurate_representation = generate_accurate_representation(long_cigar, start, end)

    long_cigar_trimmed = parse_cigar(accurate_representation)
    summary = {
        'match': 0,
        'mismatch': 0,
        'insertion': 0,
        'deletion': 0,
        'splice': 0,
        'soft_clip': 0,
        'hard_clip': 0,
        'padding': 0,
        'unmatched_long': 0,
        'unmatched_sub': 0
    }

    long_index = 0
    sub_index = 0

    print(f"Trimmed Long Read CIGAR: {long_cigar_trimmed}")
    print(f"Subread CIGAR: {sub_cigar}")

    while long_index < len(long_cigar_trimmed) and sub_index < len(sub_cigar):
        long_len, long_op = long_cigar_trimmed[long_index]
        sub_len, sub_op = sub_cigar[sub_index]

        if long_op == sub_op:
            common_len = min(long_len, sub_len)
            summary[get_cigar_name(long_op)] += common_len
            long_len -= common_len
            sub_len -= common_len

            if long_len == 0:
                long_index += 1
            else:
                long_cigar_trimmed[long_index] = (long_len, long_op)

            if sub_len == 0:
                sub_index += 1
            else:
                sub_cigar[sub_index] = (sub_len, sub_op)
        else:
            if long_op in ['I', 'D', 'N', 'S', 'H', 'P']:
                summary[get_cigar_name(long_op)] += long_len
                summary['unmatched_long'] += long_len
                long_index += 1
            elif sub_op in ['I', 'D', 'N', 'S', 'H', 'P']:
                summary[get_cigar_name(sub_op)] += sub_len
                summary['unmatched_sub'] += sub_len
                sub_index += 1
            else:
                common_len = min(long_len, sub_len)
                summary['unmatched_long'] += common_len
                summary['unmatched_sub'] += common_len
                long_len -= common_len
                sub_len -= common_len

                if long_len == 0:
                    long_index += 1
                else:
                    long_cigar_trimmed[long_index] = (long_len, long_op)

                if sub_len == 0:
                    sub_index += 1
                else:
                    sub_cigar[sub_index] = (sub_len, sub_op)

    while long_index < len(long_cigar_trimmed):
        length, op = long_cigar_trimmed[long_index]
        summary[get_cigar_name(op)] += length
        summary['unmatched_long'] += length
        long_index += 1

    while sub_index < len(sub_cigar):
        length, op = sub_cigar[sub_index]
        summary[get_cigar_name(op)] += length
        summary['unmatched_sub'] += length
        sub_index += 1

    total_subread_bases = sum(summary[op] for op in ['match', 'insertion', 'deletion', 'splice', 'unmatched_sub'])
    accuracy, precision, recall = calculate_accuracy_precision_recall(summary, total_subread_bases)

    print(f"Summary: {summary}")
    print(f"Accuracy: {accuracy}, Precision: {precision}, Recall: {recall}")

    return summary, accuracy, precision, recall, accurate_representation

def compare_cigar_strings(long_read_cigar_dict, subread_cigar_list):
    results = []
    matched_count = 0
    unmatched_count = 0

    print("\nLong read sequence IDs:")
    print(", ".join(list(long_read_cigar_dict.keys())[:10]) + "...")

    print("\nSubread sequence IDs:")
    print(", ".join([seq_id for seq_id, _, _, _ in subread_cigar_list[:10]]) + "...")

    for seq_id, subread_cigar, start, end in subread_cigar_list:
        if seq_id in long_read_cigar_dict:
            matched_count += 1
            long_read_cigar = long_read_cigar_dict[seq_id]
            print(f"Matching Subread to Long Read: {seq_id}")
            summary, accuracy, precision, recall, accurate_representation = align_subread_to_longread(long_read_cigar, subread_cigar, start, end)
            row = [seq_id, long_read_cigar, subread_cigar, accurate_representation] + [summary[op] for op in ['match', 'mismatch', 'insertion', 'deletion', 'splice', 'soft_clip', 'hard_clip', 'padding', 'unmatched_long', 'unmatched_sub']] + [accuracy, precision, recall]
            results.append(row)
        else:
            print(f"No matching long read for subread {seq_id}")
            unmatched_count += 1

    print(f"Matched subreads: {matched_count}")
    print(f"Unmatched subreads: {unmatched_count}")

    headers = [
        "Seq ID",
        "Long Read CIGAR",
        "Subread CIGAR",
        "Accurate Representation",
        "Match",
        "Mismatch",
        "Insertion",
        "Deletion",
        "Splice",
        "Soft Clip",
        "Hard Clip",
        "Padding",
        "Unmatched Long",
        "Unmatched Subread",
        "Accuracy",
        "Precision",
        "Recall"
    ]

    # Save the results to a TSV file
    with open('/Users/AlvinZhang2026/comparison_results.tsv', 'w', newline='') as file:
        writer = csv.writer(file, delimiter='\t')
        writer.writerow(headers)
        writer.writerows(results)

    # Display the results in a table format
    print("\nComparison Results:")
    print(tabulate(results, headers=headers, tablefmt="grid"))

# Example usage
long_read_bam_file = "/Users/AlvinZhang2026/bio_data/several_reads.bam"
subread_bam_file = "/Users/AlvinZhang2026/STARoutput9.bam"

long_read_cigar_dict, subread_cigar_list = read_and_process_reads(long_read_bam_file, subread_bam_file)
compare_cigar_strings(long_read_cigar_dict, subread_cigar_list)
