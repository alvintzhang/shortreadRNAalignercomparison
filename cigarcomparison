import re
import pysam

# Function to parse a CIGAR string into a list of tuples (operation length, operation type)
def parse_cigar(cigar_string):
    return [(int(length), op) for length, op in re.findall(r'(\d+)([MIDNSHP=X])', cigar_string)]

# Function to compare two CIGAR strings and summarize differences
def compare_cigar_strings(long_read_cigar, subread_cigar):
    long_cigar = parse_cigar(long_read_cigar)
    sub_cigar = parse_cigar(subread_cigar)

    long_index = 0
    sub_index = 0
    summary = {
        'match': 0,
        'mismatch': 0,
        'insertion': 0,
        'deletion': 0,
        'splice': 0,
        'soft_clip': 0,
        'hard_clip': 0,
        'padding': 0,
        'unmatched_long': 0,
        'unmatched_sub': 0
    }

    while long_index < len(long_cigar) and sub_index < len(sub_cigar):
        long_len, long_op = long_cigar[long_index]
        sub_len, sub_op = sub_cigar[sub_index]

        if long_op == sub_op:
            common_len = min(long_len, sub_len)
            summary[get_cigar_name(long_op)] += common_len
            long_len -= common_len
            sub_len -= common_len

            if long_len == 0:
                long_index += 1
            if sub_len == 0:
                sub_index += 1
        else:
            if long_op == 'M' or sub_op == 'M':
                summary['unmatched_long'] += long_len
                summary['unmatched_sub'] += sub_len
                long_index += 1
                sub_index += 1
            else:
                if long_op in summary:
                    summary['unmatched_long'] += long_len
                    long_index += 1
                if sub_op in summary:
                    summary['unmatched_sub'] += sub_len
                    sub_index += 1

    # Handle remaining unmatched operations in the long read
    while long_index < len(long_cigar):
        length, op = long_cigar[long_index]
        summary['unmatched_long'] += length
        long_index += 1

    # Handle remaining unmatched operations in the subread
    while sub_index < len(sub_cigar):
        length, op = sub_cigar[sub_index]
        summary['unmatched_sub'] += length
        sub_index += 1

    return summary

# Function to convert CIGAR operation codes to names for summary
def get_cigar_name(op):
    return {
        'M': 'match',
        'I': 'insertion',
        'D': 'deletion',
        'N': 'splice',
        'S': 'soft_clip',
        'H': 'hard_clip',
        'P': 'padding',
        '=': 'match',
        'X': 'mismatch'
    }.get(op, 'unknown')

# Function to read CIGAR strings from BAM file
def read_cigar_from_bam(filepath):
    cigars = []
    bamfile = pysam.AlignmentFile(filepath, "rb")
    for read in bamfile.fetch():
        cigars.append(read.cigarstring)
    bamfile.close()
    return cigars

# Function to compare CIGAR strings from two BAM files
def compare_cigar_files(long_read_cigar, subread_file):
    subread_cigars = read_cigar_from_bam(subread_file)

    results = []
    for subread_cigar in subread_cigars:
        summary = compare_cigar_strings(long_read_cigar, subread_cigar)
        results.append(summary)
        print(f"Comparison Summary for {long_read_cigar} vs {subread_cigar}:")
        for k, v in summary.items():
            print(f"{k}: {v}")
        print("\n")

    return results

# Test with example CIGAR strings of different lengths but match well
test_pairs = [
    ("20M5I10M", "15M5I10M"),
    ("30M5D15M", "25M5D10M"),
    ("40M10N20M", "35M10N15M"),
    ("50M5I10M2D30M", "45M5I5M2D25M"),
    ("25M3S20M5I30M", "20M3S15M5I25M")
]

for long_cigar, sub_cigar in test_pairs:
    print(f"Testing {long_cigar} vs {sub_cigar}")
    summary = compare_cigar_strings(long_cigar, sub_cigar)
    print(f"Comparison Summary for {long_cigar} vs {sub_cigar}:")
    for k, v in summary.items():
        print(f"{k}: {v}")
    print("\n")

long_read_cigar_string = "69S508M5I570M4I389M2D12247N38M7978N108M2S"
subread_file_path = "/Users/AlvinZhang2026/testbam.bam"
compare_cigar_files(long_read_cigar_string, subread_file_path)
